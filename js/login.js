/**
 * CORRX - –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
 * 
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞.
 * 
 * –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ª–∏–∑–µ:
 * - –£–±—Ä–∞–Ω—ã console.log –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ result.success –≤ authenticateUser.
 * - –î–æ–±–∞–≤–ª–µ–Ω clearUserSession() –Ω–∞ –æ—à–∏–±–∫–∞—Ö.
 * - –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (friendly messages).
 * - –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è fetch.
 */

document.addEventListener('DOMContentLoaded', function() {
    // ==================== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
    const CONFIG = {
        API_BASE_URL: 'https://corrx.morylis.ru/backend',
        ENDPOINTS: {
            LOGIN: '/auth/login',
            VERIFY: '/auth/verify'
        },
        REQUEST_TIMEOUT: 10000,
        MIN_USERNAME_LENGTH: 3,
        MIN_PASSWORD_LENGTH: 8
    };

    // ==================== DOM ELEMENTS ====================
    const loginForm = document.getElementById('loginForm');
    const loginButton = document.getElementById('loginButton');
    const errorMessage = document.getElementById('errorMessage');
    const buttonText = loginButton.querySelector('.button-text');
    const loadingSpinner = loginButton.querySelector('.loading-spinner');

    // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ ====================
    initLoginSystem();

    function initLoginSystem() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –¥–ª—è expired —Å–µ—Å—Å–∏–∏
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('session') === 'expired') {
            showError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
            // –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
            window.history.replaceState({}, '', window.location.pathname);
        }
        
        checkExistingSession();
        loadSavedCredentials();
        setupEventListeners();
    }

    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================
    function setupEventListeners() {
        if (!loginForm) {
            return;
        }

        loginForm.addEventListener('submit', handleLogin);
        
        const inputs = loginForm.querySelectorAll('input[required]');
        inputs.forEach(input => {
            input.addEventListener('input', () => clearFieldError(input));
            input.addEventListener('blur', () => validateField(input));
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && validateForm()) {
                    handleLogin(e);
                }
            });
        });

        window.addEventListener('online', handleConnectionRestored);
        window.addEventListener('offline', handleConnectionLost);
    }

    // ==================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ====================
    async function handleLogin(e) {
        e.preventDefault();
        
        if (!validateForm()) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
            return;
        }

        const formData = new FormData(loginForm);
        const credentials = {
            username: formData.get('username').trim(),
            password: formData.get('password'),
            remember: formData.get('remember') === 'on'
        };

        setLoadingState(true);
        clearError();

        try {
            const result = await authenticateUser(credentials.username, credentials.password);
            
            if (result.success && result.data) {
                await handleSuccessfulLogin(result.data, credentials);
            } else {
                throw new Error(result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            handleLoginError(error);
        } finally {
            setLoadingState(false);
        }
    }

    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç success –≤ result.
     */
    async function authenticateUser(username, password) {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), CONFIG.REQUEST_TIMEOUT);
            
            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.LOGIN, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    username: username,
                    password: password
                }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                const errorText = await response.text();
                let errorMessage = `HTTP ${response.status}`;
                
                try {
                    const errorJson = JSON.parse(errorText);
                    errorMessage = errorJson.message || errorMessage;
                } catch (e) {}
                
                throw new Error(errorMessage);
            }

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || 'Authentication failed');
            }
            
            return result;
            
        } catch (error) {
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, redirect.
     */
    async function handleSuccessfulLogin(data, credentials) {
        const token = data.token;
        const user = data.user;
        const settings = data.settings || {};
        
        if (!token || !user) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        localStorage.setItem('userToken', token);
        sessionStorage.setItem('isLoggedIn', 'true');
        sessionStorage.setItem('user', JSON.stringify(user));
        localStorage.setItem('userSettings', JSON.stringify(settings)); // –ò–ª–∏ session if not persistent
        
        if (credentials.remember) {
            saveCredentials(credentials.username);
        } else {
            clearSavedCredentials();
        }
        
        window.location.href = 'dashboard.html';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
     */
    function saveUserSession(user, token, settings) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        sessionStorage.clear();
        localStorage.removeItem('userToken');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        sessionStorage.setItem('user', JSON.stringify(user));
        sessionStorage.setItem('isLoggedIn', 'true');
        sessionStorage.setItem('userSettings', JSON.stringify(settings));
        
        localStorage.setItem('userToken', token);
        
        console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', {
            user: user.username,
            tokenLength: token.length,
            session: sessionStorage.getItem('isLoggedIn')
        });
    }

    // ==================== –ü–†–û–í–ï–†–ö–ê –°–ï–°–°–ò–ò ====================
    async function checkExistingSession() {
        const isLoggedIn = sessionStorage.getItem('isLoggedIn');
        const userToken = localStorage.getItem('userToken');
        const userData = sessionStorage.getItem('user');
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏...', {
            isLoggedIn: isLoggedIn,
            token: userToken ? 'present' : 'missing',
            userData: userData ? 'present' : 'missing'
        });

        if (isLoggedIn !== 'true' || !userToken || !userData) {
            console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
            return;
        }

        try {
            console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API...');
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), CONFIG.REQUEST_TIMEOUT);

            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.VERIFY, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${userToken}`  // –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º Authorization header
                },
                body: JSON.stringify({ token: userToken }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard');
                    window.location.href = 'dashboard.html';
                    return;
                }
            }
            
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
            console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
            clearUserSession();
            
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error.message);
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            clearUserSession();
        }
    }

    // ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú ====================
    function validateForm() {
        const inputs = loginForm.querySelectorAll('input[required]');
        let isValid = true;

        inputs.forEach(input => {
            if (!validateField(input)) {
                isValid = false;
            }
        });

        return isValid;
    }

    function validateField(input) {
        const value = input.value.trim();
        let isValid = true;
        let errorMessage = '';

        if (!value) {
            errorMessage = '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
            isValid = false;
        } else if (input.type === 'password' && value.length < CONFIG.MIN_PASSWORD_LENGTH) {
            errorMessage = `–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${CONFIG.MIN_PASSWORD_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`;
            isValid = false;
        } else if (input.name === 'username' && value.length < CONFIG.MIN_USERNAME_LENGTH) {
            errorMessage = `–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${CONFIG.MIN_USERNAME_LENGTH} —Å–∏–º–≤–æ–ª–∞`;
            isValid = false;
        }

        if (isValid) {
            markFieldValid(input);
        } else {
            markFieldInvalid(input, errorMessage);
        }

        return isValid;
    }

    // ==================== UI –£–¢–ò–õ–ò–¢–´ ====================
    function setLoadingState(loading) {
        if (loading) {
            loginButton.disabled = true;
            buttonText.style.display = 'none';
            loadingSpinner.style.display = 'block';
            loginButton.setAttribute('aria-busy', 'true');
        } else {
            loginButton.disabled = false;
            buttonText.style.display = 'block';
            loadingSpinner.style.display = 'none';
            loginButton.setAttribute('aria-busy', 'false');
        }
    }

    function showError(message) {
        if (!errorMessage) return;
        errorMessage.textContent = message;
        errorMessage.className = 'error-message error';
        errorMessage.style.display = 'block';
        animateMessage(errorMessage);
    }

    function showSuccess(message) {
        if (!errorMessage) return;
        errorMessage.textContent = message;
        errorMessage.className = 'error-message success';
        errorMessage.style.display = 'block';
        animateMessage(errorMessage);
    }

    function clearError() {
        if (!errorMessage) return;
        errorMessage.style.display = 'none';
        errorMessage.textContent = '';
        errorMessage.className = 'error-message';
    }

    function animateMessage(element) {
        element.style.animation = 'none';
        setTimeout(() => {
            element.style.animation = 'fadeInUp 0.3s ease-out';
        }, 10);
    }

    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
    function saveCredentials(username) {
        localStorage.setItem('rememberedUser', username);
        console.log('üíæ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }

    function loadSavedCredentials() {
        const rememberedUser = localStorage.getItem('rememberedUser');
        if (rememberedUser) {
            const usernameInput = loginForm.querySelector('input[name="username"]');
            if (usernameInput) {
                usernameInput.value = rememberedUser;
                const passwordInput = loginForm.querySelector('input[name="password"]');
                if (passwordInput) {
                    passwordInput.focus();
                }
            }
            console.log('üìù –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
    }

    function clearSavedCredentials() {
        localStorage.removeItem('rememberedUser');
        console.log('üßπ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }

    function clearUserSession() {
        sessionStorage.clear();
        localStorage.removeItem('userToken');
        localStorage.removeItem('userSettings');
    }

    function handleLoginError(error) {
        const userMessage = getFriendlyErrorMessage(error);
        showError(userMessage);
    }

    function getFriendlyErrorMessage(error) {
        const message = error.message.toLowerCase();
        
        if (message.includes('–Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω') || 
            message.includes('invalid username') || 
            message.includes('invalid password')) {
            return '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        }
        if (message.includes('–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç') || message.includes('json')) {
            return '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞';
        }
        if (message.includes('network') || message.includes('failed to fetch')) {
            return '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
        }
        
        return error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞';
    }

    // ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–õ–ï–ô ====================
    function markFieldValid(input) {
        const container = input.closest('.input_container');
        if (!container) return;
        container.classList.remove('invalid');
        container.classList.add('valid');
        removeFieldError(container);
    }

    function markFieldInvalid(input, message) {
        const container = input.closest('.input_container');
        if (!container) return;
        container.classList.remove('valid');
        container.classList.add('invalid');
        removeFieldError(container);
        showFieldError(container, message);
    }

    function clearFieldError(input) {
        const container = input.closest('.input_container');
        if (!container) return;
        container.classList.remove('invalid', 'valid');
        removeFieldError(container);
        clearError();
    }

    function removeFieldError(container) {
        const existingError = container.nextElementSibling;
        if (existingError && existingError.classList.contains('field-error')) {
            existingError.remove();
        }
    }

    function showFieldError(container, message) {
        const errorElement = document.createElement('div');
        errorElement.className = 'field-error';
        errorElement.textContent = message;
        container.parentNode.insertBefore(errorElement, container.nextSibling);
    }

    // ==================== –°–ò–°–¢–ï–ú–ù–´–ï –°–û–ë–´–¢–ò–Ø ====================
    function handleConnectionRestored() {
        console.log('üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        showSuccess('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        setTimeout(clearError, 2000);
    }

    function handleConnectionLost() {
        console.warn('üì∂ –ü–æ—Ç–µ—Ä—è–Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        showError('–ü–æ—Ç–µ—Ä—è–Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }
});