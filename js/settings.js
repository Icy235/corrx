/**
 * CORRX - –°–¢–†–ê–ù–ò–¶–ê –ù–ê–°–¢–†–û–ï–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
 * 
 * –§–£–ù–ö–¶–ò–û–ù–ê–õ:
 * ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * ‚úÖ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * ‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * 
 * API –≠–ù–î–ü–û–ò–ù–¢–´:
 * GET /user/profile - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * POST /user/update-profile - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * POST /user/change-password - —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
 * GET /user/settings - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * POST /user/update-settings - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */

document.addEventListener('DOMContentLoaded', function() {
    // ==================== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
const CONFIG = {
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ API
    API_BASE_URL: 'https://corrx.morylis.ru/backend',
    ENDPOINTS: {
        // Auth endpoints
        LOGIN: '/auth/login',
        VERIFY: '/auth/verify',
        // User endpoints  
        PROFILE: '/user/profile',
        SETTINGS: '/user/settings',
        UPDATE_PROFILE: '/user/update-profile',
        CHANGE_PASSWORD: '/user/change-password',
        UPDATE_SETTINGS: '/user/update-settings',
        // Smeta endpoints
        CREATE_SMETA: '/smeta/create',
        GET_SMETAS: '/smeta/getUserSmetas',
        GET_SMETA_DETAILS: '/smeta/getSmetaDetails',
        UPDATE_SMETA: '/smeta/update',
        DELETE_SMETA: '/smeta/delete',
        UPDATE_STATUS: '/smeta/updateStatus',
        SEARCH_SMETA: '/smeta/search'
    },
    REQUEST_TIMEOUT: 10000
};

    // ==================== DOM ELEMENTS ====================
    const userInfoSection = document.getElementById('userInfo');
    const settingsSection = document.getElementById('settingsSection');
    const logoutBtn = document.getElementById('logoutBtn');
    const profileForm = document.getElementById('profileForm');
    const passwordForm = document.getElementById('passwordForm');
    const settingsForm = document.getElementById('settingsForm');
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');

    // ==================== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ====================
    let currentUser = null;
    let userSettings = null;

    // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================
    initSettingsPage();

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async function initSettingsPage() {
        console.log('‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const isAuthenticated = await checkAuthentication();
        
        if (!isAuthenticated) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
            redirectToLogin();
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await loadUserData();
        setupEventListeners();
        initSafeAreas();
        
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async function checkAuthentication() {
        const token = localStorage.getItem('userToken');
        const userSession = sessionStorage.getItem('isLoggedIn');
        
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        console.log('Token:', token ? 'present' : 'missing');
        console.log('Session:', userSession);

        if (!token || userSession !== 'true') {
            console.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Å–µ—Å—Å–∏–∏');
            return false;
        }

        try {
            console.log('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞...');
            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.VERIFY_TOKEN, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ token: token })
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                    currentUser = result.data.user;
                    return true;
                }
            }
            
            console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
            return false;
            
        } catch (error) {
            console.error('üåê –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const demoUser = sessionStorage.getItem('user');
            if (demoUser) {
                console.log('üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º');
                currentUser = JSON.parse(demoUser);
                return true;
            }
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async function loadUserData() {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        try {
            await Promise.all([
                loadUserProfile(),
                loadUserSettings()
            ]);
            
            updateUI();
            showSuccess('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async function loadUserProfile() {
        const token = localStorage.getItem('userToken');
        
        try {
            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.PROFILE, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success && result.data) {
                currentUser = result.data.user;
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω:', currentUser.username);
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            
            // Fallback –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
            const demoUser = sessionStorage.getItem('user');
            if (demoUser) {
                currentUser = JSON.parse(demoUser);
                console.log('üé≠ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
            } else {
                throw error;
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async function loadUserSettings() {
        const token = localStorage.getItem('userToken');
        
        try {
            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.SETTINGS, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success && result.data) {
                userSettings = result.data.settings;
                console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            
            // Fallback –Ω–∞ –¥–µ–º–æ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const demoSettings = localStorage.getItem('userSettings');
            if (demoSettings) {
                userSettings = JSON.parse(demoSettings);
                console.log('üé≠ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
            } else {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                userSettings = {
                    theme: 'light',
                    auto_logout: true,
                    caching_enabled: true,
                    notifications_enabled: true
                };
                console.log('‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    function setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        logoutBtn.addEventListener('click', handleLogout);
        
        // –§–æ—Ä–º–∞ –ø—Ä–æ—Ñ–∏–ª—è
        profileForm.addEventListener('submit', handleProfileUpdate);
        
        // –§–æ—Ä–º–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
        passwordForm.addEventListener('submit', handlePasswordChange);
        
        // –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settingsForm.addEventListener('submit', handleSettingsUpdate);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        setupFormValidation();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        window.addEventListener('online', handleConnectionRestored);
        window.addEventListener('offline', handleConnectionLost);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º
     */
    function setupFormValidation() {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailInput = profileForm.querySelector('input[type="email"]');
        if (emailInput) {
            emailInput.addEventListener('blur', validateEmail);
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
        const passwordInputs = passwordForm.querySelectorAll('input[type="password"]');
        passwordInputs.forEach(input => {
            input.addEventListener('input', () => clearFieldError(input));
            input.addEventListener('blur', () => validatePasswordField(input));
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    function updateUI() {
        if (!currentUser) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        updateUserInfo();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ø—Ä–æ—Ñ–∏–ª—è
        fillProfileForm();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        fillSettingsForm();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    function updateUserInfo() {
        const userInfoHTML = `
            <div class="user-avatar">
                <div class="avatar-placeholder">
                    ${currentUser.full_name ? currentUser.full_name.charAt(0).toUpperCase() : currentUser.username.charAt(0).toUpperCase()}
                </div>
            </div>
            <div class="user-details">
                <h3 class="user-name">${currentUser.full_name || currentUser.username}</h3>
                <p class="user-username">@${currentUser.username}</p>
                <p class="user-role">${currentUser.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</p>
                ${currentUser.isDemo ? '<p class="demo-badge">–î–µ–º–æ-—Ä–µ–∂–∏–º</p>' : ''}
            </div>
        `;
        
        userInfoSection.innerHTML = userInfoHTML;
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
     */
    function fillProfileForm() {
        const fullNameInput = profileForm.querySelector('input[name="full_name"]');
        const emailInput = profileForm.querySelector('input[name="email"]');
        const phoneInput = profileForm.querySelector('input[name="phone"]');
        
        if (fullNameInput) fullNameInput.value = currentUser.full_name || '';
        if (emailInput) emailInput.value = currentUser.email || '';
        if (phoneInput) phoneInput.value = currentUser.phone || '';
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    function fillSettingsForm() {
        if (!userSettings) return;
        
        const themeSelect = settingsForm.querySelector('select[name="theme"]');
        const autoLogoutToggle = settingsForm.querySelector('input[name="auto_logout"]');
        const cachingToggle = settingsForm.querySelector('input[name="caching_enabled"]');
        const notificationsToggle = settingsForm.querySelector('input[name="notifications_enabled"]');
        
        if (themeSelect) themeSelect.value = userSettings.theme || 'light';
        if (autoLogoutToggle) autoLogoutToggle.checked = userSettings.auto_logout !== false;
        if (cachingToggle) cachingToggle.checked = userSettings.caching_enabled !== false;
        if (notificationsToggle) notificationsToggle.checked = userSettings.notifications_enabled !== false;
    }

    // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–û–†–ú ====================

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
     */
    async function handleProfileUpdate(e) {
        e.preventDefault();
        
        if (!validateProfileForm()) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
            return;
        }

        const formData = new FormData(profileForm);
        const profileData = {
            full_name: formData.get('full_name').trim(),
            email: formData.get('email').trim(),
            phone: formData.get('phone').trim()
        };

        setFormLoading(profileForm, true);
        clearMessages();

        try {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...');
            
            const token = localStorage.getItem('userToken');
            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.UPDATE_PROFILE, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(profileData)
            });

            const result = await response.json();
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                Object.assign(currentUser, profileData);
                updateUserInfo();
                showSuccess('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ' + error.message);
        } finally {
            setFormLoading(profileForm, false);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
     */
    async function handlePasswordChange(e) {
        e.preventDefault();
        
        if (!validatePasswordForm()) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
            return;
        }

        const formData = new FormData(passwordForm);
        const passwordData = {
            current_password: formData.get('current_password'),
            new_password: formData.get('new_password'),
            confirm_password: formData.get('confirm_password')
        };

        setFormLoading(passwordForm, true);
        clearMessages();

        try {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è...');
            
            const token = localStorage.getItem('userToken');
            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.CHANGE_PASSWORD, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    current_password: passwordData.current_password,
                    new_password: passwordData.new_password
                })
            });

            const result = await response.json();
            
            if (result.success) {
                passwordForm.reset();
                showSuccess('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
                console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω');
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
            showError('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: ' + error.message);
        } finally {
            setFormLoading(passwordForm, false);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async function handleSettingsUpdate(e) {
        e.preventDefault();
        
        const formData = new FormData(settingsForm);
        const settingsData = {
            theme: formData.get('theme'),
            auto_logout: formData.get('auto_logout') === 'on',
            caching_enabled: formData.get('caching_enabled') === 'on',
            notifications_enabled: formData.get('notifications_enabled') === 'on'
        };

        setFormLoading(settingsForm, true);
        clearMessages();

        try {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
            
            const token = localStorage.getItem('userToken');
            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.UPDATE_SETTINGS, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(settingsData)
            });

            const result = await response.json();
            
            if (result.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                userSettings = settingsData;
                localStorage.setItem('userSettings', JSON.stringify(settingsData));
                applySettings(settingsData);
                showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
                console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message);
        } finally {
            setFormLoading(settingsForm, false);
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    function applySettings(settings) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        document.documentElement.setAttribute('data-theme', settings.theme);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
        localStorage.setItem('appSettings', JSON.stringify(settings));
        
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:', settings.theme);
    }

    // ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
     */
    function validateProfileForm() {
        const emailInput = profileForm.querySelector('input[type="email"]');
        const email = emailInput?.value.trim();
        
        if (email && !validateEmail(emailInput)) {
            return false;
        }
        
        return true;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è email
     */
    function validateEmail(input) {
        const email = input.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (email && !emailRegex.test(email)) {
            markFieldInvalid(input, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
            return false;
        }
        
        markFieldValid(input);
        return true;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–∞—Ä–æ–ª—è
     */
    function validatePasswordForm() {
        const currentPassword = passwordForm.querySelector('input[name="current_password"]');
        const newPassword = passwordForm.querySelector('input[name="new_password"]');
        const confirmPassword = passwordForm.querySelector('input[name="confirm_password"]');
        
        let isValid = true;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
        if (!currentPassword.value.trim()) {
            markFieldInvalid(currentPassword, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
            isValid = false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        if (newPassword.value.length < 8) {
            markFieldInvalid(newPassword, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
            isValid = false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        if (newPassword.value !== confirmPassword.value) {
            markFieldInvalid(confirmPassword, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
            isValid = false;
        }
        
        return isValid;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
     */
    function validatePasswordField(input) {
        if (input.name === 'new_password' && input.value.length < 8) {
            markFieldInvalid(input, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
            return false;
        }
        
        markFieldValid(input);
        return true;
    }

    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    function handleLogout() {
        console.log('üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
        
        // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        sessionStorage.clear();
        localStorage.removeItem('userToken');
        localStorage.removeItem('userSettings');
        localStorage.removeItem('rememberedUser');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        redirectToLogin();
    }

    /**
     * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
     */
    function redirectToLogin() {
        window.location.href = 'login_page.html';
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã
     */
    function setFormLoading(form, loading) {
        const submitButton = form.querySelector('button[type="submit"]');
        const buttonText = submitButton.querySelector('.button-text');
        const loadingSpinner = submitButton.querySelector('.loading-spinner');
        
        if (loading) {
            submitButton.disabled = true;
            buttonText.style.display = 'none';
            loadingSpinner.style.display = 'block';
        } else {
            submitButton.disabled = false;
            buttonText.style.display = 'block';
            loadingSpinner.style.display = 'none';
        }
    }

    /**
     * –ü–æ–º–µ—Ç–∫–∞ –ø–æ–ª—è –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ
     */
    function markFieldInvalid(input, message) {
        const container = input.closest('.input_container');
        container.classList.remove('valid');
        container.classList.add('invalid');
        
        removeFieldError(container);
        showFieldError(container, message);
    }

    /**
     * –ü–æ–º–µ—Ç–∫–∞ –ø–æ–ª—è –∫–∞–∫ –≤–∞–ª–∏–¥–Ω–æ–≥–æ
     */
    function markFieldValid(input) {
        const container = input.closest('.input_container');
        container.classList.remove('invalid');
        container.classList.add('valid');
        removeFieldError(container);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–æ–ª—è
     */
    function clearFieldError(input) {
        const container = input.closest('.input_container');
        container.classList.remove('invalid', 'valid');
        removeFieldError(container);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—è
     */
    function removeFieldError(container) {
        const existingError = container.nextElementSibling;
        if (existingError && existingError.classList.contains('field-error')) {
            existingError.remove();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—è
     */
    function showFieldError(container, message) {
        const errorElement = document.createElement('div');
        errorElement.className = 'field-error';
        errorElement.textContent = message;
        container.parentNode.insertBefore(errorElement, container.nextSibling);
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    function showError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        successMessage.style.display = 'none';
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
     */
    function showSuccess(message) {
        successMessage.textContent = message;
        successMessage.style.display = 'block';
        errorMessage.style.display = 'none';
        
        // –ê–≤—Ç–æ-—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(clearMessages, 3000);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    function clearMessages() {
        errorMessage.style.display = 'none';
        successMessage.style.display = 'none';
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    function handleConnectionRestored() {
        console.log('üì∂ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        showSuccess('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    function handleConnectionLost() {
        console.warn('üì∂ –ü–æ—Ç–µ—Ä—è–Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        showError('–ü–æ—Ç–µ—Ä—è–Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è safe areas –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    function initSafeAreas() {
        function updateSafeAreas() {
            const root = document.documentElement;
            root.style.setProperty('--safe-area-top', 'env(safe-area-inset-top, 0px)');
            root.style.setProperty('--safe-area-bottom', 'env(safe-area-inset-bottom, 0px)');
        }
        
        updateSafeAreas();
        window.addEventListener('resize', updateSafeAreas);
        window.addEventListener('orientationchange', updateSafeAreas);
    }
});