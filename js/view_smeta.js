/**
 * –õ–û–ì–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ü–†–û–°–ú–û–¢–†–ê –î–ï–¢–ê–õ–ï–ô –°–ú–ï–¢–´ (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
 */

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã)
const CALCULATION_CONSTANTS = {
    // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    PROFLE_SHEET_PRICE_PER_KG: 150,
    WOOD_PRICE_PER_CUBIC_METER: 15000,
    BOLT_PRICE_PER_UNIT: 50,
    CONNECTION_PRICE_PER_UNIT: 500,
    EMBED_PRICE_PER_UNIT: 1500,

    // –ú–æ–Ω—Ç–∞–∂
    WORKER_PRICE_PER_DAY: 5000,
    EQUIPMENT_PRICE_PER_DAY: 10000,
    ACCOMMODATION_PRICE_PER_DAY: 5000,
    TRANSPORTATION_PRICE_PER_KM: 500,

    // –§—É–Ω–¥–∞–º–µ–Ω—Ç
    CONCRETE_PRICE_PER_CUBIC_METER: 5000,
    REBAR_PRICE_PER_KG: 50,
    FORMWORK_PRICE_PER_SQ_M: 1000,
    PILE_PRICE_PER_UNIT: 5000,
    CHANNEL_PRICE_PER_M: 1000,

    // –ù–∞—Ü–µ–Ω–∫–∞ (–ø—Ä–∏–±—ã–ª—å)
    PROFIT_MARGIN: 0.2 // 20%
};

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ view_smeta.js –∑–∞–≥—Ä—É–∂–µ–Ω');

    // ==================== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
    const CONFIG = {
        API_BASE_URL: 'https://corrx.morylis.ru/backend',
        ENDPOINTS: {
            VERIFY: '/auth/verify',
            GET_SMETA_DETAILS: '/smeta/getSmetaDetails',
            UPDATE_STATUS: '/smeta/updateStatus'
        }
    };

    // ==================== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ====================
    let currentSmeta = null;
    let smetaId = null;

    // ==================== –û–°–ù–û–í–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
    initApp();

    async function initApp() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Å–º–µ—Ç—ã –∏–∑ URL
        smetaId = getSmetaIdFromURL();
        if (!smetaId) {
            console.error('‚ùå ID —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
            showError('ID —Å–º–µ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
            return;
        }
        console.log('üìã ID —Å–º–µ—Ç—ã:', smetaId);

        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (!await checkAuth()) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
        await loadSmetaData();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
        initUI();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    function getSmetaIdFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('id');
    }

    async function checkAuth() {
        const token = localStorage.getItem('userToken');
        const userSession = sessionStorage.getItem('isLoggedIn');
        
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
            hasToken: !!token,
            tokenLength: token ? token.length : 0,
            userSession: userSession
        });

        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ —Å–µ—Å—Å–∏–∏
        if (!token || userSession !== 'true') {
            console.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Å–µ—Å—Å–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω');
            redirectToLogin();
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
        try {
            console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API...');
            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.VERIFY, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ token: token })
            });

            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', response.status);

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω:', result.success);
                if (result.success) {
                    return true;
                }
            } else {
                console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞:', error);
        }

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
        console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º');
        clearAuthData();
        redirectToLogin();
        return false;
    }

    async function loadSmetaData() {
        try {
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã...');
            const token = localStorage.getItem('userToken');
            
            if (!token) {
                throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const response = await fetch(`${CONFIG.API_BASE_URL}${CONFIG.ENDPOINTS.GET_SMETA_DETAILS}?id=${smetaId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç—ã:', response.status);

            if (response.status === 401) {
                throw new Error('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
            }

            if (!response.ok) {
                throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
            }

            const result = await response.json();
            console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
            
            if (result.success && result.data) {
                currentSmeta = result.data;
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', currentSmeta);
                displaySmetaData();
            } else {
                throw new Error(result.message || '–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç—ã:', error);
            showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–º–µ—Ç—ã: ' + error.message);
        }
    }

    function displaySmetaData() {
        if (!currentSmeta) {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }

        console.log('üé® –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã...');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const pageTitle = document.querySelector('.page-title');
        if (pageTitle) {
            pageTitle.textContent = `–°–º–µ—Ç–∞ ‚Ññ${currentSmeta.id}`;
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        displayCustomerData();
        displayGeneralInfo();
        displaySmetaSections();
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
    }

    function displayCustomerData() {
        const customer = currentSmeta.customer || {};
        const infoContainer = document.querySelector('.info-container');
        
        if (!infoContainer) return;

        console.log('üë§ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞:', customer);

        let html = '';
        let hasData = false;

        // –ö–æ–º–ø–∞–Ω–∏—è
        if (customer.company) {
            html += `
                <div class="info-item">
                    <img src="assets/icons/briefcase.svg" alt="–ö–æ–º–ø–∞–Ω–∏—è">
                    <span class="info-label">–ö–æ–º–ø–∞–Ω–∏—è:</span>
                    <span class="info-value">${escapeHtml(customer.company)}</span>
                </div>
            `;
            hasData = true;
        }

        // –ö–æ–Ω—Ç–∞–∫—Ç—ã
        const contacts = customer.contacts || {};
        if (contacts.names && contacts.names.length > 0) {
            html += `
                <div class="info-item">
                    <img src="assets/icons/user.svg" alt="–§–ò–û">
                    <span class="info-label">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</span>
                    <span class="info-value">${escapeHtml(contacts.names.join(', '))}</span>
                </div>
            `;
            hasData = true;
        }

        if (contacts.phones && contacts.phones.length > 0) {
            html += `
                <div class="info-item">
                    <img src="assets/icons/phone.svg" alt="–¢–µ–ª–µ—Ñ–æ–Ω">
                    <span class="info-label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                    <span class="info-value">${escapeHtml(contacts.phones.join(', '))}</span>
                </div>
            `;
            hasData = true;
        }

        if (contacts.emails && contacts.emails.length > 0) {
            html += `
                <div class="info-item">
                    <img src="assets/icons/mail.svg" alt="–ü–æ—á—Ç–∞">
                    <span class="info-label">Email:</span>
                    <span class="info-value">${escapeHtml(contacts.emails.join(', '))}</span>
                </div>
            `;
            hasData = true;
        }

        // –ê–¥—Ä–µ—Å –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const geolocation = currentSmeta.geolocation || {};
        if (geolocation.address) {
            html += `
                <div class="info-item">
                    <img src="assets/icons/map.svg" alt="–ê–¥—Ä–µ—Å">
                    <span class="info-label">–ê–¥—Ä–µ—Å:</span>
                    <span class="info-value">${escapeHtml(geolocation.address)}</span>
                </div>
            `;
            hasData = true;
        }

        // –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
        const additionalOptions = currentSmeta.additional_options || {};
        const specialRequests = additionalOptions.specialRequests || {};
        if (specialRequests.text) {
            html += `
                <div class="info-item">
                    <img src="assets/icons/favorite.svg" alt="–ü–æ–∂–µ–ª–∞–Ω–∏—è">
                    <span class="info-label">–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</span>
                    <span class="info-value">${escapeHtml(specialRequests.text)}</span>
                </div>
            `;
            hasData = true;
        }

        infoContainer.innerHTML = html;

        // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∑–∞–∫–∞–∑—á–∏–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        const customerSection = document.querySelector('.form-section');
        if (customerSection && !hasData) {
            customerSection.style.display = 'none';
            console.log('üë§ –°–µ–∫—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å–∫—Ä—ã—Ç–∞ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)');
        } else {
            console.log('üë§ –°–µ–∫—Ü–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞');
        }
    }

    function displayGeneralInfo() {
        const generalInfo = currentSmeta.calculated_prices || {};
        const production = currentSmeta.production || {};
        
        console.log('üìä –û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è:', { generalInfo, production });
        
        updateStatusDisplay(currentSmeta.status);
        
        const foundationType = production.foundation || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const foundationElement = document.querySelector('.info-row:nth-child(2) .info-value');
        if (foundationElement) {
            foundationElement.textContent = foundationType;
        }
        
        if (generalInfo.total_with_vat) {
            const element = document.querySelector('.info-row:nth-child(3) .price-value');
            if (element) {
                element.textContent = formatPrice(generalInfo.total_with_vat);
            }
        }
        
        if (generalInfo.total_without_vat) {
            const element = document.querySelector('.info-row:nth-child(4) .price-value');
            if (element) {
                element.textContent = formatPrice(generalInfo.total_without_vat);
            }
        }
        
        if (generalInfo.price_per_m2) {
            const element = document.querySelector('.info-row:nth-child(5) .price-value');
            if (element) {
                element.textContent = formatPrice(generalInfo.price_per_m2) + '/–º¬≤';
            }
        }
    }

    function displaySmetaSections() {
        if (!currentSmeta) return;

        console.log('üèóÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π —Å–º–µ—Ç—ã...');
        
        const production = currentSmeta.production || {};
        const installation = currentSmeta.installation || {};
        const additionalOptions = currentSmeta.additional_options || {};
        const geolocation = currentSmeta.geolocation || {};

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        calculateAndDisplayProduction(production);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–Ω—Ç–∞–∂
        calculateAndDisplayInstallation(installation, geolocation);

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞
        displaySelectedFoundation(production, additionalOptions);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–∏–±—ã–ª—å
        calculateAndDisplayProfit(production);
    }

    function calculateAndDisplayProduction(production) {
        const length = parseFloat(production.length) || 0;
        const width = parseFloat(production.width) || 0;
        const area = length * width;

        console.log('üè≠ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:', { length, width, area });

        if (area === 0) {
            const section = document.querySelector('.smeta-section:nth-child(1)');
            if (section) section.style.display = 'none';
            return;
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        updateParamValue('area', area, '–º¬≤');
        updateParamValue('width', width, '–º');
        updateParamValue('length', length, '–º');

        // –†–∞—Å—á–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã)
        const totalWeight = area * 20; // –ü—Ä–∏–º–µ—Ä: 20 –∫–≥/–º¬≤
        const productionCost = area * CALCULATION_CONSTANTS.PROFLE_SHEET_PRICE_PER_KG * 0.8;

        updateParamValue('total-weight', totalWeight, '–∫–≥');
        updateParamValue('weight-per-m2', (totalWeight / area).toFixed(2), '–∫–≥/–º¬≤');
        updateParamValue('production-cost-per-m2', productionCost / area, '‚ÇΩ/–º¬≤');
        updateParamValue('total-production-cost', productionCost, '‚ÇΩ');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–µ–∫—Ü–∏–∏
        const sectionPrice = document.querySelector('.smeta-section:nth-child(1) .section-price');
        if (sectionPrice) {
            sectionPrice.textContent = formatPrice(productionCost);
        }
    }

    function calculateAndDisplayInstallation(installation, geolocation) {
        if (!installation.enabled) {
            const section = document.querySelector('.smeta-section:nth-child(2)');
            if (section) section.style.display = 'none';
            return;
        }

        const distance = parseFloat(installation.distance) || 0;
        const production = currentSmeta.production || {};
        const area = (parseFloat(production.length) || 0) * (parseFloat(production.width) || 0);

        console.log('üîß –î–∞–Ω–Ω—ã–µ –º–æ–Ω—Ç–∞–∂–∞:', { distance, area });

        // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–Ω—Ç–∞–∂–∞
        const workers = 4;
        const days = Math.ceil(area / 100);
        const workerCost = workers * days * CALCULATION_CONSTANTS.WORKER_PRICE_PER_DAY;
        const equipmentCost = days * CALCULATION_CONSTANTS.EQUIPMENT_PRICE_PER_DAY;
        const transportCost = distance * CALCULATION_CONSTANTS.TRANSPORTATION_PRICE_PER_KM;
        const accommodationCost = installation.workerAccommodation ? workers * days * CALCULATION_CONSTANTS.ACCOMMODATION_PRICE_PER_DAY : 0;

        const totalInstallationCost = workerCost + equipmentCost + transportCost + accommodationCost;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        updateParamValue('workers', workers, '—á–µ–ª');
        updateParamValue('days', days, '–¥–Ω–µ–π');
        updateParamValue('worker-cost', workerCost, '‚ÇΩ');
        updateParamValue('equipment-cost', equipmentCost, '‚ÇΩ');
        updateParamValue('distance', distance, '–∫–º');
        updateParamValue('transport-cost', transportCost, '‚ÇΩ');
        updateParamValue('accommodation-cost', accommodationCost, '‚ÇΩ');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Å–µ–∫—Ü–∏–∏
        const sectionPrice = document.querySelector('.smeta-section:nth-child(2) .section-price');
        if (sectionPrice) {
            sectionPrice.textContent = formatPrice(totalInstallationCost);
        }
    }

    function displaySelectedFoundation(production, additionalOptions) {
        const foundationType = production.foundation;
        console.log('üèóÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞:', foundationType);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞
        document.querySelectorAll('.foundation-section').forEach(section => {
            section.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
        const selectedSection = document.querySelector(`[data-foundation-type="${foundationType}"]`);
        if (selectedSection) {
            selectedSection.style.display = 'block';
            calculateAndDisplayFoundation(foundationType, production, additionalOptions);
            console.log('‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç:', foundationType);
        } else {
            console.log('‚ùå –°–µ–∫—Ü–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–∏–ø–∞:', foundationType);
        }
    }

    function calculateAndDisplayFoundation(foundationType, production, additionalOptions) {
        const length = parseFloat(production.length) || 0;
        const width = parseFloat(production.width) || 0;
        const area = length * width;
        const perimeter = 2 * (length + width);

        let foundationCost = 0;

        switch (foundationType) {
            case 'slab':
                // –†–∞—Å—á–µ—Ç –¥–ª—è –ø–ª–∏—Ç—ã
                const concreteVolume = area * 0.15; // 150–º–º —Ç–æ–ª—â–∏–Ω–∞
                const concreteCost = concreteVolume * CALCULATION_CONSTANTS.CONCRETE_PRICE_PER_CUBIC_METER;
                const rebarWeight = area * 20; // 20 –∫–≥/–º¬≤ –∞—Ä–º–∞—Ç—É—Ä—ã
                const rebarCost = rebarWeight * CALCULATION_CONSTANTS.REBAR_PRICE_PER_KG;
                const formworkArea = perimeter * 0.3; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å –æ–ø–∞–ª—É–±–∫–∏
                const formworkCost = formworkArea * CALCULATION_CONSTANTS.FORMWORK_PRICE_PER_SQ_M;

                foundationCost = concreteCost + rebarCost + formworkCost;

                updateParamValue('concrete-volume', concreteVolume.toFixed(2), '–º¬≥');
                updateParamValue('concrete-cost', concreteCost, '‚ÇΩ');
                updateParamValue('rebar-weight', rebarWeight, '–∫–≥');
                updateParamValue('rebar-cost', rebarCost, '‚ÇΩ');
                updateParamValue('formwork-area', formworkArea.toFixed(2), '–º¬≤');
                updateParamValue('formwork-cost', formworkCost, '‚ÇΩ');
                break;

            case 'piles':
                // –†–∞—Å—á–µ—Ç –¥–ª—è —Å–≤–∞–π
                const pilesCount = Math.ceil(perimeter / 3); // –°–≤–∞—è –∫–∞–∂–¥—ã–µ 3 –º–µ—Ç—Ä–∞
                const pilesCost = pilesCount * CALCULATION_CONSTANTS.PILE_PRICE_PER_UNIT;
                const channelLength = perimeter;
                const channelCost = channelLength * CALCULATION_CONSTANTS.CHANNEL_PRICE_PER_M;

                foundationCost = pilesCost + channelCost;

                updateParamValue('piles-count', pilesCount, '—à—Ç');
                updateParamValue('channel-length', channelLength, '–º');
                updateParamValue('piles-cost', pilesCost, '‚ÇΩ');
                updateParamValue('channel-cost', channelCost, '‚ÇΩ');
                break;

            case 'strip':
                // –†–∞—Å—á–µ—Ç –¥–ª—è –ª–µ–Ω—Ç–æ—á–Ω–æ–≥–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞
                const stripConcreteVolume = perimeter * 0.6 * 0.3; // –®–∏—Ä–∏–Ω–∞ 0.6–º, –≤—ã—Å–æ—Ç–∞ 0.3–º
                const stripConcreteCost = stripConcreteVolume * CALCULATION_CONSTANTS.CONCRETE_PRICE_PER_CUBIC_METER;
                const stripRebarWeight = perimeter * 15; // 15 –∫–≥/–º –∞—Ä–º–∞—Ç—É—Ä—ã
                const stripRebarCost = stripRebarWeight * CALCULATION_CONSTANTS.REBAR_PRICE_PER_KG;
                const stripFormworkArea = perimeter * 0.6;
                const stripFormworkCost = stripFormworkArea * CALCULATION_CONSTANTS.FORMWORK_PRICE_PER_SQ_M;

                foundationCost = stripConcreteCost + stripRebarCost + stripFormworkCost;

                updateParamValue('strip-concrete-volume', stripConcreteVolume.toFixed(2), '–º¬≥');
                updateParamValue('strip-concrete-cost', stripConcreteCost, '‚ÇΩ');
                updateParamValue('strip-rebar-weight', stripRebarWeight, '–∫–≥');
                updateParamValue('strip-rebar-cost', stripRebarCost, '‚ÇΩ');
                updateParamValue('strip-formwork-area', stripFormworkArea.toFixed(2), '–º¬≤');
                updateParamValue('strip-formwork-cost', stripFormworkCost, '‚ÇΩ');
                break;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
        const electricsCost = additionalOptions.electrics ? 25000 : 0;
        const insulationCost = additionalOptions.insulation ? 20000 : 0;
        const prepWorkCost = 15000;

        const totalFoundationCost = foundationCost + electricsCost + insulationCost + prepWorkCost;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –ø–æ–¥—Å–µ–∫—Ü–∏—è—Ö
        const foundationSubsections = document.querySelectorAll(`[data-foundation-type="${foundationType}"] .subsection`);
        if (foundationSubsections[0]) {
            const subsectionPrice = foundationSubsections[0].querySelector('.subsection-price');
            if (subsectionPrice) subsectionPrice.textContent = formatPrice(foundationCost);
        }
        if (foundationSubsections[1]) {
            const subsectionPrice = foundationSubsections[1].querySelector('.subsection-price');
            if (subsectionPrice) subsectionPrice.textContent = formatPrice(electricsCost);
        }
        if (foundationSubsections[2]) {
            const subsectionPrice = foundationSubsections[2].querySelector('.subsection-price');
            if (subsectionPrice) subsectionPrice.textContent = formatPrice(insulationCost);
        }
        if (foundationSubsections[3]) {
            const subsectionPrice = foundationSubsections[3].querySelector('.subsection-price');
            if (subsectionPrice) subsectionPrice.textContent = formatPrice(prepWorkCost);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Ü–µ–Ω—É —Å–µ–∫—Ü–∏–∏
        const sectionPrice = document.querySelector(`[data-foundation-type="${foundationType}"] .section-price`);
        if (sectionPrice) {
            sectionPrice.textContent = formatPrice(totalFoundationCost);
        }
    }

    function calculateAndDisplayProfit(production) {
        const length = parseFloat(production.length) || 0;
        const width = parseFloat(production.width) || 0;
        const area = length * width;

        if (area === 0) {
            const section = document.querySelector('.smeta-section:last-child');
            if (section) section.style.display = 'none';
            return;
        }

        // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
        const productionCost = area * CALCULATION_CONSTANTS.PROFLE_SHEET_PRICE_PER_KG * 0.8;
        const installationCost = 350000;
        const foundationCost = 180000;

        const totalCost = productionCost + installationCost + foundationCost;
        const profit = totalCost * CALCULATION_CONSTANTS.PROFIT_MARGIN;
        const sellingPrice = totalCost + profit;

        updateParamValue('cost-per-m2', totalCost / area, '‚ÇΩ/–º¬≤');
        updateParamValue('total-cost', totalCost, '‚ÇΩ');
        updateParamValue('profit-per-m2', profit / area, '‚ÇΩ/–º¬≤');
        updateParamValue('total-profit', profit, '‚ÇΩ');

        const sectionPrice = document.querySelector('.smeta-section:last-child .section-price');
        if (sectionPrice) {
            sectionPrice.textContent = formatPrice(profit);
        }
    }

    function initUI() {
        console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
        initCollapsibleSections();
        initActionButtons();
        initSearch();
        initModals();
        initSelectors();
        console.log('‚úÖ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    function initCollapsibleSections() {
        const sectionHeaders = document.querySelectorAll('.section-header');
        sectionHeaders.forEach(header => {
            header.addEventListener('click', function() {
                const section = this.closest('.smeta-section');
                section.classList.toggle('active');
            });
        });
        
        const subsectionHeaders = document.querySelectorAll('.subsection-header');
        subsectionHeaders.forEach(header => {
            header.addEventListener('click', function() {
                const subsection = this.closest('.subsection');
                subsection.classList.toggle('active');
            });
        });
    }

    function initActionButtons() {
        const shareBtn = document.querySelector('.share-btn');
        if (shareBtn) {
            shareBtn.addEventListener('click', function() {
                document.getElementById('shareModal').classList.add('active');
            });
        }
        
        const editBtn = document.querySelector('.edit-btn');
        if (editBtn) {
            editBtn.addEventListener('click', function() {
                window.location.href = `create_new_smeta.html?edit=true&id=${smetaId}`;
            });
        }
    }

    function initSearch() {
        const searchContainer = document.querySelector('.search-container');
        const searchInput = document.querySelector('.search-input');
        const searchClear = document.querySelector('.search-clear');
        
        if (searchClear) {
            searchClear.addEventListener('click', function() {
                searchInput.value = '';
                clearSearchHighlights();
                searchInput.focus();
            });
        }
        
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.trim().toLowerCase();
                if (searchTerm.length > 0) {
                    performSearch(searchTerm);
                } else {
                    clearSearchHighlights();
                }
            });
        }
    }

    function initModals() {
        const shareModal = document.getElementById('shareModal');
        const closeShareModal = document.getElementById('closeShareModal');
        const generateProposal = document.getElementById('generateProposal');
        const sendAsText = document.getElementById('sendAsText');
        
        const textPreviewModal = document.getElementById('textPreviewModal');
        const closeTextPreview = document.getElementById('closeTextPreview');
        const copyAllText = document.getElementById('copyAllText');
        
        if (closeShareModal) {
            closeShareModal.addEventListener('click', function() {
                shareModal.classList.remove('active');
            });
        }
        
        if (closeTextPreview) {
            closeTextPreview.addEventListener('click', function() {
                textPreviewModal.classList.remove('active');
            });
        }
        
        if (shareModal) {
            shareModal.addEventListener('click', function(e) {
                if (e.target === shareModal) {
                    shareModal.classList.remove('active');
                }
            });
        }
        
        if (textPreviewModal) {
            textPreviewModal.addEventListener('click', function(e) {
                if (e.target === textPreviewModal) {
                    textPreviewModal.classList.remove('active');
                }
            });
        }
        
        if (generateProposal) {
            generateProposal.addEventListener('click', function() {
                generateCommercialProposal();
                shareModal.classList.remove('active');
            });
        }
        
        if (sendAsText) {
            sendAsText.addEventListener('click', function() {
                showTextPreview();
                shareModal.classList.remove('active');
            });
        }
        
        if (copyAllText) {
            copyAllText.addEventListener('click', function() {
                copySmetaText();
            });
        }
    }

    function initSelectors() {
        const statusOptions = document.querySelectorAll('.status-option');
        statusOptions.forEach(option => {
            option.addEventListener('click', function() {
                const status = this.getAttribute('data-status');
                updateSmetaStatus(status);
            });
        });
    }

    // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

    function updateParamValue(paramName, value, unit) {
        const element = document.querySelector(`[data-param="${paramName}"] .param-value`);
        if (element) {
            if (typeof value === 'number') {
                element.textContent = formatNumber(value);
            } else {
                element.textContent = value;
            }
            const unitElement = element.querySelector('.unit');
            if (unitElement) {
                unitElement.textContent = unit;
            }
        }
    }

    function formatNumber(value) {
        return new Intl.NumberFormat('ru-RU').format(value);
    }

    async function updateSmetaStatus(status) {
        try {
            const token = localStorage.getItem('userToken');
            
            if (!token) {
                throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            const response = await fetch(CONFIG.API_BASE_URL + CONFIG.ENDPOINTS.UPDATE_STATUS, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    id: smetaId,
                    status: status
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success) {
                updateStatusDisplay(status);
                showNotification(`–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: "${getStatusText(status)}"`, 'success');
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + error.message, 'error');
        }
    }

    function updateStatusDisplay(status) {
        const statusOptions = document.querySelectorAll('.status-option');
        statusOptions.forEach(option => {
            option.classList.remove('active');
            if (option.getAttribute('data-status') === status) {
                option.classList.add('active');
            }
        });
    }

    function performSearch(searchTerm) {
        clearSearchHighlights();
        
        const searchableElements = document.querySelectorAll('.info-item, .param-item, .subsection-header, .section-header');
        
        searchableElements.forEach(element => {
            const text = element.textContent.toLowerCase();
            if (text.includes(searchTerm)) {
                element.style.backgroundColor = 'rgba(94, 123, 0, 0.1)';
                
                let currentElement = element;
                while (currentElement) {
                    if (currentElement.classList.contains('subsection')) {
                        currentElement.classList.add('active');
                        const section = currentElement.closest('.smeta-section');
                        if (section) section.classList.add('active');
                    }
                    if (currentElement.classList.contains('smeta-section')) {
                        currentElement.classList.add('active');
                    }
                    currentElement = currentElement.parentElement;
                }
            }
        });
    }

    function clearSearchHighlights() {
        document.querySelectorAll('.info-item, .param-item, .subsection-header, .section-header').forEach(el => {
            el.style.backgroundColor = '';
        });
    }

    function showTextPreview() {
        const text = formatSmetaAsText();
        document.getElementById('smetaTextContent').textContent = text;
        document.getElementById('textPreviewModal').classList.add('active');
    }

    function copySmetaText() {
        const text = document.getElementById('smetaTextContent').textContent;
        
        navigator.clipboard.writeText(text).then(() => {
            showNotification('–¢–µ–∫—Å—Ç —Å–º–µ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        }).catch(() => {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            showNotification('–¢–µ–∫—Å—Ç —Å–º–µ—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        });
    }

    function generateCommercialProposal() {
        showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...', 'info');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–ü
    }

    function formatSmetaAsText() {
        if (!currentSmeta) return '–î–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
        
        let text = `–°–ú–ï–¢–ê ‚Ññ${currentSmeta.id}\n`;
        text += `–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}\n`;
        text += `====================\n\n`;
        
        text += `–ó–ê–ö–ê–ó–ß–ò–ö:\n`;
        const customer = currentSmeta.customer || {};
        if (customer.company) text += `  –ö–æ–º–ø–∞–Ω–∏—è: ${customer.company}\n`;
        
        const contacts = customer.contacts || {};
        if (contacts.names) text += `  –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: ${contacts.names.join(', ')}\n`;
        if (contacts.phones) text += `  –¢–µ–ª–µ—Ñ–æ–Ω: ${contacts.phones.join(', ')}\n`;
        if (contacts.emails) text += `  Email: ${contacts.emails.join(', ')}\n`;
        
        text += `\n–û–ë–©–ò–ï –°–í–ï–î–ï–ù–ò–Ø:\n`;
        text += `  –°—Ç–∞—Ç—É—Å: ${getStatusText(currentSmeta.status)}\n`;
        
        const production = currentSmeta.production || {};
        if (production.foundation) text += `  –¢–∏–ø —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞: ${production.foundation}\n`;
        
        const prices = currentSmeta.calculated_prices || {};
        if (prices.total_with_vat) text += `  –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Å –ù–î–°): ${formatPrice(prices.total_with_vat)}\n`;
        if (prices.total_without_vat) text += `  –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–µ–∑ –ù–î–°): ${formatPrice(prices.total_without_vat)}\n`;
        if (prices.price_per_m2) text += `  –°—Ç–æ–∏–º–æ—Å—Ç—å –º¬≤: ${formatPrice(prices.price_per_m2)}/–º¬≤\n`;
        
        text += `\n====================\n`;
        text += `–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ Corrx\n`;
        
        return text;
    }

    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <span>${message}</span>
            <button class="notification-close">√ó</button>
        `;
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#27ae60' : type === 'error' ? '#e74c3c' : '#3498db'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            font-family: 'Unbounded', sans-serif;
            font-size: 0.9rem;
            z-index: 10000;
            animation: slideInRight 0.3s ease-out;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            gap: 10px;
        `;
        
        document.body.appendChild(notification);
        
        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.remove();
        });
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideOutRight 0.3s ease-in';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }, 3000);
    }

    function showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-state';
        errorDiv.innerHTML = `
            <div class="error-icon">‚ö†Ô∏è</div>
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
            <button class="retry-btn" onclick="location.reload()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
        `;
        
        document.querySelector('.view-main').innerHTML = '';
        document.querySelector('.view-main').appendChild(errorDiv);
    }

    function getStatusText(status) {
        const statusMap = {
            'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
            'pending': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'archived': '–ê—Ä—Ö–∏–≤'
        };
        return statusMap[status] || '–ß–µ—Ä–Ω–æ–≤–∏–∫';
    }

    function formatPrice(price) {
        if (!price || price === 0) {
            return '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ';
        }
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0
        }).format(price);
    }

    function escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    function clearAuthData() {
        localStorage.removeItem('userToken');
        sessionStorage.removeItem('isLoggedIn');
        sessionStorage.removeItem('user');
    }

    function redirectToLogin() {
        console.log('üîÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
        window.location.href = 'login_page.html';
    }

    // ==================== –°–¢–ò–õ–ò –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ô ====================
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        @keyframes slideOutRight {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
        
        .notification-close {
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .error-state {
            text-align: center;
            padding: 40px 20px;
            color: #e74c3c;
        }
        
        .error-icon {
            font-size: 3rem;
            margin-bottom: 20px;
        }
        
        .retry-btn {
            background: #5E7B00;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-family: 'Unbounded', sans-serif;
            margin-top: 20px;
        }
    `;
    document.head.appendChild(style);
});